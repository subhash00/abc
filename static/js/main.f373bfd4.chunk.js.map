{"version":3,"sources":["components/calculator/calculator.js","components/dialer/dialer.js","components/dialer/index.js","components/display/display.js","components/display/index.js","components/calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["calculator","clickHandler","text","equalTo","clear","backSpace","setState","result","state","eval","slice","this","Component","dialer","className","name","onClick","e","props","target","Dialer","display","Display","Calculator","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f373bfd4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Dialer from '../dialer';\r\nimport Display from '../display';\r\n\r\nclass calculator extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            result:\"\"\r\n        }\r\n    }\r\n    clickHandler = (text) => {\r\n        switch (text) {\r\n            case \"equalTo\": {\r\n                this.equalTo();\r\n                break;\r\n            }\r\n            case \"clear\": {\r\n                this.clear();\r\n                break;\r\n            }\r\n            case \"backSpace\": {\r\n                this.backSpace();\r\n                break;\r\n            }\r\n            default: {\r\n                this.setState({\r\n                    result: this.state.result + text\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    equalTo = () => {\r\n        this.setState({\r\n            result: eval(this.state.result || \"\") + \"\"\r\n        })\r\n    }\r\n    clear = () => {\r\n        this.setState({\r\n            result: \"\"\r\n        })\r\n    }\r\n    backSpace = () => {\r\n        this.setState({\r\n            result: this.state.result.slice(0, -1)\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>  \r\n                <Display result={this.state.result} />\r\n                <Dialer clickHandler={this.clickHandler} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default calculator;","import React, { Component } from 'react';\r\nimport './dialer.css';\r\n\r\nclass dialer extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"mainDialer\">\r\n                <button name='(' onClick={e => this.props.clickHandler(e.target.name)}>(</button>\r\n                <button name=')' onClick={e => this.props.clickHandler(e.target.name)}>)</button>\r\n                <button name='backSpace' onClick={e => this.props.clickHandler(e.target.name)}>&#8592;</button>\r\n                <button name='clear' onClick={e => this.props.clickHandler(e.target.name)}>C</button><br />\r\n\r\n                <button name='1' onClick={e => this.props.clickHandler(e.target.name)}>1</button>\r\n                <button name='2' onClick={e => this.props.clickHandler(e.target.name)}>2</button>\r\n                <button name='3' onClick={e => this.props.clickHandler(e.target.name)}>3</button>\r\n                <button name='+' onClick={e => this.props.clickHandler(e.target.name)}>+</button><br />\r\n\r\n                <button name='4' onClick={e => this.props.clickHandler(e.target.name)}>4</button>\r\n                <button name='5' onClick={e => this.props.clickHandler(e.target.name)}>5</button>\r\n                <button name='6' onClick={e => this.props.clickHandler(e.target.name)}>6</button>\r\n                <button name='-' onClick={e => this.props.clickHandler(e.target.name)}>-</button><br />\r\n\r\n                <button name='7' onClick={e => this.props.clickHandler(e.target.name)}>7</button>\r\n                <button name='8' onClick={e => this.props.clickHandler(e.target.name)}>8</button>\r\n                <button name='9' onClick={e => this.props.clickHandler(e.target.name)}>9</button>\r\n                <button name='*' onClick={e => this.props.clickHandler(e.target.name)}>*</button><br />\r\n\r\n                <button name='.' onClick={e => this.props.clickHandler(e.target.name)}>.</button>\r\n                <button name='0' onClick={e => this.props.clickHandler(e.target.name)}>0</button>\r\n                <button name='/' onClick={e => this.props.clickHandler(e.target.name)}>/</button>\r\n                <button name='equalTo' onClick={e => this.props.clickHandler(e.target.name)}>=</button><br />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default dialer;","import Dialer from './dialer.js';\r\n\r\nexport default Dialer;","import React, { Component } from 'react';\r\nimport './display.css'\r\n\r\nclass display extends Component {\r\n    render() {\r\n        const { result } = this.props;\r\n        return (\r\n            <div className=\"mainDisplay\">\r\n                <p className=\"inputField\">{result}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default display;","import Display from './display';\r\n\r\nexport default Display;","import Calculator from './calculator.js';\r\n\r\nexport default Calculator;","import React from 'react';\nimport Calculator from './components/calculator'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"mainContainer\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}